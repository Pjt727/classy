package components

import (
"fmt"
"github.com/Pjt727/classy/collection"
"github.com/Pjt727/classy/data/db"
"strconv"
)

type ManagementOrchestrator struct {
O *collection.Orchestrator
Name string
Label int
}

func id(idValue string) string {
return fmt.Sprintf("#%s", idValue)
}

var orchTable = "managementOrchestrators"
var notificationStack = "notifications"

templ Dashboard(orchestrators []*ManagementOrchestrator) {
@Base() {
<div style="position: absolute; top: 5px; right: 0px;">
    <button hx-delete="/manage/db" hx-confirm="Are you sure?" hx-vals='{"db": "main"}' hx-swap="none">
        Reset Main
        DB
    </button>
    <button hx-delete="/manage/db" hx-vals='{"db": "test"}' hx-swap="none">Reset Test DB</button>
</div>
<h1>Add a new orchestrator</h1>
<div>
    @NewOrchestrator()
</div>
@ManageOrchestrators(orchestrators)
}
}

templ NewOrchestrator() {
<form hx-post="/manage" hx-swap="outerHTML">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" value="Orchestrator" />
    <br />
    <button type="submit">Submit</button>
</form>
}

templ ManageOrchestrators(orchestrators []*ManagementOrchestrator) {
<table id={ orchTable } hx-swap-oob="true">
    <tbody>
        for _, orch := range orchestrators {
        <tr>
            <td>{ orch.Name }</td>
            <td><a href={ templ.SafeURL(fmt.Sprintf("/manage/%d", orch.Label)) }>View Activity</a></td>
        </tr>
        }
    </tbody>
</table>
}

templ OrchestratorDashboard(orchestrator *ManagementOrchestrator, collections []db.TermCollection) {
@Base() {
<div>
    <h1 style="display: inline; padding-right: 25px;">`{ orchestrator.Name }` Activity</h1>
    <label for="isFullCollection" style="display: inline">
        Do Full Collection:
        <input type="checkbox" id="isFullCollection" name="isFullCollection" />
    </label>
</div>
<h2>Active collections</h2>
@OrchestratorActiveCollections(orchestrator, collections)
<h2>Available schools and services </h2>
<table>
    for _, schoolService := range orchestrator.O.GetSchoolsWithService() {
    <tr hx-target="next tr" hx-indicator="next div">
        <td>{ schoolService.ServiceName }</td>
        <td>{ schoolService.School.Name }</td>
        <td>
            <form hx-post={ fmt.Sprintf("/manage/%d/terms", orchestrator.Label) } hx-indicator="find span">
                <input type="text" name="serviceName" value={ schoolService.ServiceName } hidden />
                <input type="text" name="schoolID" value={ schoolService.School.ID } hidden />
                <button type="submit">
                    Get Terms
                </button>
                <span class="htmx-indicator">
                    <img src="/static/spinner.gif" width="50px" height="50px" alt="Loading..." />
                </span>
            </form>
        </td>
    </tr>
    <tr></tr>
    }
</table>
}
}

var ActiveCollections = "activeCollections"
var activeLogsFormat = "logs-%s-%s"
var jobProgressFormat = "progress-%s-%s"

templ OrchestratorActiveCollections(orchestrator *ManagementOrchestrator, collections []db.TermCollection) {
<table hx-ext="ws" ws-connect={ fmt.Sprintf("/manage/%d/watch-logs", orchestrator.Label) }>
    <thead>
        <tr>
            <th>Term ID</th>
            <th>School ID</th>
            <th></th>
        </tr>
    </thead>
    <tbody id={ ActiveCollections }>
        for _, collection := range collections {
        @ActiveTermCollection(collection)
        }
    </tbody>
</table>
}

templ ActiveTermCollectionOob(collection db.TermCollection) {
<tbody id={ ActiveCollections } hx-swap-oob="beforeend">
    @ActiveTermCollection(collection)
</tbody>
}

templ ActiveTermCollection(collection db.TermCollection) {
<tr>
    <td>{ collection.ID }</td>
    <td>{ collection.SchoolID }</td>
    <td id={ fmt.Sprintf(jobProgressFormat, collection.ID, collection.SchoolID) }>
        <img src="/static/spinner.gif" width="25px" height="25px" alt="Job In Progress..." />
    </td>
</tr>
<tr>
    <td colspan="100%" style="paddings: 0;">
        <div style="max-height: 200px; display: block; overflow-y: scroll;" width="100%">
            <table>
                <tbody id={ fmt.Sprintf(activeLogsFormat, collection.ID, collection.SchoolID) }></tbody>
            </table>
        </div>
    </td>
</tr>
}

templ CollectionLog(collection db.TermCollection, log string) {
<tbody id={ fmt.Sprintf(activeLogsFormat, collection.ID, collection.SchoolID) } hx-swap-oob="beforeend">
    <tr>
        <td>
            @templ.Raw(log)
        </td>
    </tr>
</tbody>
}

type JobStatus string

const (
JobError JobStatus = "Error"
JobSuccess JobStatus = "Success"
)

templ JobFinished(orchestratorLabel int, serviceName string, collection db.TermCollection, jobStatus JobStatus) {
{{ var img string }}
{{ var title string }}
switch jobStatus {
case JobSuccess:
{{ img = "/static/check2-circle.svg" }}
{{ title = "Complete" }}
case JobError:
{{ img = "/static/x-circle.svg" }}
{{ title = "Failed" }}
}
<td id={ fmt.Sprintf(jobProgressFormat, collection.ID, collection.SchoolID) } style="position: relative">
    <img src={ img } width="25px" height="25px" title={ title } alt={ fmt.Sprintf("Job complete: %s", jobStatus) } />
    <form hx-patch={ fmt.Sprintf("/manage/%d/terms", orchestratorLabel) } hx-swap="none">
        <input type="text" name="serviceName" value={ serviceName } hidden />
        <input type="text" name="schoolID" value={ collection.SchoolID } hidden />
        <input type="text" name="termID" value={ collection.ID } hidden />
        <button
            style="position: absolute; top: 0px; right: 50px; background: none; border: none; color: black; cursor: pointer;"
            type="submit" onclick="

      let row = this.closest('tr');
      if (row) {
        let nextRow = row.nextElementSibling;
        setTimeout(() => {row.remove()}, 30)
        if (nextRow) {
          nextRow.remove();
        }
      }
    ">
            <img src="/static/arrow-counterclockwise.svg" alt="Retry" title="Retry" />
        </button>
    </form>
    <button
        style="position: absolute; top: 0px; right: 0px; background: none; border: none; color: black; cursor: pointer; font-size: 14px;"
        onclick="
      let row = this.closest('tr');
      if (row) {
        let nextRow = row.nextElementSibling;
        row.remove();
        if (nextRow) {
          nextRow.remove();
        }
      }
    ">&times;</button>
</td>
}

templ TermCollections(
orchestrator *ManagementOrchestrator,
terms []db.TermCollection,
serviceName string,
) {
<td colspan="100%" style="padding: 0;">
    <table class="termCollections">
        <thead>
            <th>ID</th>
            <th>Season</th>
            <th>Year</th>
            <th>
                Still Collecting?
                <button style="background: none; border: none; color: black; cursor: pointer; font-size: 16px;"
                    onclick="this.closest('table').closest('td').remove()">-</button>
            </th>
        </thead>
        <tbody>
            for _, term := range terms {
            <tr>
                <td>
                    <a href="#" title="Collect" hx-swap="none" hx-include="#isFullCollection, next form" hx-patch={
                        fmt.Sprintf("/manage/%d/terms", orchestrator.Label) }>
                        { term.ID }
                    </a>
                    <form hidden>
                        <input type="text" name="serviceName" value={ serviceName } />
                        <input type="text" name="schoolID" value={ term.SchoolID } />
                        <input type="text" name="termID" value={ term.ID } />
                    </form>
                </td>
                <td>{ string(term.Season) }</td>
                <td>{ strconv.Itoa(int(term.Year)) }</td>
                if term.StillCollecting {
                <td>Yes</td>
                } else {
                <td>No</td>
                }
                <td></td>
            </tr>
            }
        </tbody>
    </table>
</td>
}
