// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type SeasonEnum string

const (
	SeasonEnumSpring SeasonEnum = "Spring"
	SeasonEnumFall   SeasonEnum = "Fall"
	SeasonEnumWinter SeasonEnum = "Winter"
	SeasonEnumSummer SeasonEnum = "Summer"
)

func (e *SeasonEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SeasonEnum(s)
	case string:
		*e = SeasonEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for SeasonEnum: %T", src)
	}
	return nil
}

type NullSeasonEnum struct {
	SeasonEnum SeasonEnum `json:"season_enum"`
	Valid      bool       `json:"valid"` // Valid is true if SeasonEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSeasonEnum) Scan(value interface{}) error {
	if value == nil {
		ns.SeasonEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SeasonEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSeasonEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SeasonEnum), nil
}

type Course struct {
	SchoolID           string      `json:"school_id"`
	SubjectCode        string      `json:"subject_code"`
	Number             string      `json:"number"`
	SubjectDescription pgtype.Text `json:"subject_description"`
	Title              pgtype.Text `json:"title"`
	Description        pgtype.Text `json:"description"`
	CreditHours        float32     `json:"credit_hours"`
}

type FacultyMember struct {
	ID           string      `json:"id"`
	SchoolID     string      `json:"school_id"`
	Name         string      `json:"name"`
	EmailAddress pgtype.Text `json:"email_address"`
	FirstName    pgtype.Text `json:"first_name"`
	LastName     pgtype.Text `json:"last_name"`
}

type MeetingTime struct {
	Sequence         int32            `json:"sequence"`
	SectionSequence  string           `json:"section_sequence"`
	TermCollectionID string           `json:"term_collection_id"`
	SubjectCode      string           `json:"subject_code"`
	CourseNumber     string           `json:"course_number"`
	SchoolID         string           `json:"school_id"`
	StartDate        pgtype.Timestamp `json:"start_date"`
	EndDate          pgtype.Timestamp `json:"end_date"`
	MeetingType      pgtype.Text      `json:"meeting_type"`
	StartMinutes     pgtype.Time      `json:"start_minutes"`
	EndMinutes       pgtype.Time      `json:"end_minutes"`
	IsMonday         bool             `json:"is_monday"`
	IsTuesday        bool             `json:"is_tuesday"`
	IsWednesday      bool             `json:"is_wednesday"`
	IsThursday       bool             `json:"is_thursday"`
	IsFriday         bool             `json:"is_friday"`
	IsSaturday       bool             `json:"is_saturday"`
	IsSunday         bool             `json:"is_sunday"`
}

type PreviousSectionCollection struct {
	SchoolID       string             `json:"school_id"`
	CollectionID   string             `json:"collection_id"`
	TimeCollection pgtype.Timestamptz `json:"time_collection"`
	IsFull         bool               `json:"is_full"`
}

type School struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Section struct {
	Sequence          string      `json:"sequence"`
	TermCollectionID  string      `json:"term_collection_id"`
	SubjectCode       string      `json:"subject_code"`
	CourseNumber      string      `json:"course_number"`
	SchoolID          string      `json:"school_id"`
	MaxEnrollment     pgtype.Int4 `json:"max_enrollment"`
	InstructionMethod pgtype.Text `json:"instruction_method"`
	Campus            pgtype.Text `json:"campus"`
	Enrollment        pgtype.Int4 `json:"enrollment"`
	PrimaryFacultyID  pgtype.Text `json:"primary_faculty_id"`
}

type SectionMeeting struct {
	Sequence         string        `json:"sequence"`
	SchoolID         string        `json:"school_id"`
	TermCollectionID string        `json:"term_collection_id"`
	SubjectCode      string        `json:"subject_code"`
	CourseNumber     string        `json:"course_number"`
	MeetingTimes     []MeetingTime `json:"meeting_times"`
}

type StagingMeetingTime struct {
	Sequence         int32            `json:"sequence"`
	SectionSequence  string           `json:"section_sequence"`
	TermCollectionID string           `json:"term_collection_id"`
	SubjectCode      string           `json:"subject_code"`
	CourseNumber     string           `json:"course_number"`
	SchoolID         string           `json:"school_id"`
	StartDate        pgtype.Timestamp `json:"start_date"`
	EndDate          pgtype.Timestamp `json:"end_date"`
	MeetingType      pgtype.Text      `json:"meeting_type"`
	StartMinutes     pgtype.Time      `json:"start_minutes"`
	EndMinutes       pgtype.Time      `json:"end_minutes"`
	IsMonday         bool             `json:"is_monday"`
	IsTuesday        bool             `json:"is_tuesday"`
	IsWednesday      bool             `json:"is_wednesday"`
	IsThursday       bool             `json:"is_thursday"`
	IsFriday         bool             `json:"is_friday"`
	IsSaturday       bool             `json:"is_saturday"`
	IsSunday         bool             `json:"is_sunday"`
}

type StagingSection struct {
	Sequence          string      `json:"sequence"`
	TermCollectionID  string      `json:"term_collection_id"`
	SubjectCode       string      `json:"subject_code"`
	CourseNumber      string      `json:"course_number"`
	SchoolID          string      `json:"school_id"`
	MaxEnrollment     pgtype.Int4 `json:"max_enrollment"`
	InstructionMethod pgtype.Text `json:"instruction_method"`
	Campus            pgtype.Text `json:"campus"`
	Enrollment        pgtype.Int4 `json:"enrollment"`
	PrimaryFacultyID  pgtype.Text `json:"primary_faculty_id"`
}

type Term struct {
	Year   int32      `json:"year"`
	Season SeasonEnum `json:"season"`
}

type TermCollection struct {
	ID              string      `json:"id"`
	SchoolID        string      `json:"school_id"`
	Year            int32       `json:"year"`
	Season          SeasonEnum  `json:"season"`
	Name            pgtype.Text `json:"name"`
	StillCollecting bool        `json:"still_collecting"`
}
