// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: get.sql

package db

import (
	"context"
)

const getSchoolsClassesForTerm = `-- name: GetSchoolsClassesForTerm :many
SELECT sections.id, sections.term_season, sections.term_year, sections.course_id, sections.school_id, sections.max_enrollment, sections.instruction_method, sections.campus, sections.enrollment, sections.primary_faculty_id, courses.id, courses.school_id, courses.subject_code, courses.number, courses.subject_description, courses.title, courses.description, courses.credit_hours, meeting_times.sequence, meeting_times.section_id, meeting_times.term_season, meeting_times.term_year, meeting_times.course_id, meeting_times.school_id, meeting_times.start_date, meeting_times.end_date, meeting_times.meeting_type, meeting_times.start_minutes, meeting_times.end_minutes, meeting_times.is_monday, meeting_times.is_tuesday, meeting_times.is_wednesday, meeting_times.is_thursday, meeting_times.is_friday, meeting_times.is_saturday, meeting_times.is_sunday
FROM sections
JOIN courses ON sections.course_id = courses.id
             AND sections.school_id = courses.school_id
             AND sections.term_year = courses.term_year
             AND sections.term_season = courses.term_season
JOIN meeting_times ON sections.id = meeting_times.section_id
             AND sections.school_id = meeting_times.school_id
             AND sections.term_year = meeting_times.term_year
             AND sections.term_season = meeting_times.term_season
WHERE sections.school_id = $1
      AND sections.term_year = $2
      AND sections.term_season = $3
`

type GetSchoolsClassesForTermParams struct {
	Schoolid   string
	Termyear   int32
	Termseason SeasonEnum
}

type GetSchoolsClassesForTermRow struct {
	Section     Section
	Course      Course
	MeetingTime MeetingTime
}

func (q *Queries) GetSchoolsClassesForTerm(ctx context.Context, arg GetSchoolsClassesForTermParams) ([]GetSchoolsClassesForTermRow, error) {
	rows, err := q.db.Query(ctx, getSchoolsClassesForTerm, arg.Schoolid, arg.Termyear, arg.Termseason)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSchoolsClassesForTermRow
	for rows.Next() {
		var i GetSchoolsClassesForTermRow
		if err := rows.Scan(
			&i.Section.ID,
			&i.Section.TermSeason,
			&i.Section.TermYear,
			&i.Section.CourseID,
			&i.Section.SchoolID,
			&i.Section.MaxEnrollment,
			&i.Section.InstructionMethod,
			&i.Section.Campus,
			&i.Section.Enrollment,
			&i.Section.PrimaryFacultyID,
			&i.Course.ID,
			&i.Course.SchoolID,
			&i.Course.SubjectCode,
			&i.Course.Number,
			&i.Course.SubjectDescription,
			&i.Course.Title,
			&i.Course.Description,
			&i.Course.CreditHours,
			&i.MeetingTime.Sequence,
			&i.MeetingTime.SectionID,
			&i.MeetingTime.TermSeason,
			&i.MeetingTime.TermYear,
			&i.MeetingTime.CourseID,
			&i.MeetingTime.SchoolID,
			&i.MeetingTime.StartDate,
			&i.MeetingTime.EndDate,
			&i.MeetingTime.MeetingType,
			&i.MeetingTime.StartMinutes,
			&i.MeetingTime.EndMinutes,
			&i.MeetingTime.IsMonday,
			&i.MeetingTime.IsTuesday,
			&i.MeetingTime.IsWednesday,
			&i.MeetingTime.IsThursday,
			&i.MeetingTime.IsFriday,
			&i.MeetingTime.IsSaturday,
			&i.MeetingTime.IsSunday,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
