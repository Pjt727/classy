// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForUpsertSections implements pgx.CopyFromSource.
type iteratorForUpsertSections struct {
	rows                 []UpsertSectionsParams
	skippedFirstNextCall bool
}

func (r *iteratorForUpsertSections) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForUpsertSections) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Campus,
		r.rows[0].CourseID,
		r.rows[0].SchoolID,
		r.rows[0].TermYear,
		r.rows[0].TermSeason,
		r.rows[0].Enrollment,
		r.rows[0].MaxEnrollment,
		r.rows[0].InstructionMethod,
		r.rows[0].PrimaryFacultyID,
	}, nil
}

func (r iteratorForUpsertSections) Err() error {
	return nil
}

// INSERT INTO sections
//
//	(sections.id, sections.campus, sections.course_id,
//	    sections.school_id, sections.term_year, sections.term_season,
//	    sections.enrollment, sections.max_enrollment, sections.instruction_method,
//	    sections.primary_faculty_id, sections.campus)
//
// VALUES
//
//	(@id, @campus, @course_id,
//	    @school_id, @term_year, @term_season,
//	    @enrollment, @max_enrollment, @instruction_method,
//	    @primary_faculty_id, @campus)
//
// ON CONFLICT (sections.id, sections.term_year, sections.term_season, sections.course_id, sections.school_id)
// DO UPDATE SET
//
//	sections.enrollment = @enrollment,
//	sections.max_enrollment = @max_enrollment,
//	sections.primary_faculty_id = @primary_faculty_id
func (q *Queries) UpsertSections(ctx context.Context, arg []UpsertSectionsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"sections"}, []string{"id", "campus", "course_id", "school_id", "term_year", "term_season", "enrollment", "max_enrollment", "instruction_method", "primary_faculty_id"}, &iteratorForUpsertSections{rows: arg})
}
