// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForStageMeetingTimes implements pgx.CopyFromSource.
type iteratorForStageMeetingTimes struct {
	rows                 []StageMeetingTimesParams
	skippedFirstNextCall bool
}

func (r *iteratorForStageMeetingTimes) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForStageMeetingTimes) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Sequence,
		r.rows[0].SectionID,
		r.rows[0].TermCollectionID,
		r.rows[0].CourseID,
		r.rows[0].SchoolID,
		r.rows[0].StartDate,
		r.rows[0].EndDate,
		r.rows[0].MeetingType,
		r.rows[0].StartMinutes,
		r.rows[0].EndMinutes,
		r.rows[0].IsMonday,
		r.rows[0].IsTuesday,
		r.rows[0].IsWednesday,
		r.rows[0].IsThursday,
		r.rows[0].IsFriday,
		r.rows[0].IsSaturday,
		r.rows[0].IsSunday,
	}, nil
}

func (r iteratorForStageMeetingTimes) Err() error {
	return nil
}

func (q *Queries) StageMeetingTimes(ctx context.Context, arg []StageMeetingTimesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"staging_meeting_times"}, []string{"sequence", "section_id", "term_collection_id", "course_id", "school_id", "start_date", "end_date", "meeting_type", "start_minutes", "end_minutes", "is_monday", "is_tuesday", "is_wednesday", "is_thursday", "is_friday", "is_saturday", "is_sunday"}, &iteratorForStageMeetingTimes{rows: arg})
}

// iteratorForStageSections implements pgx.CopyFromSource.
type iteratorForStageSections struct {
	rows                 []StageSectionsParams
	skippedFirstNextCall bool
}

func (r *iteratorForStageSections) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForStageSections) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Campus,
		r.rows[0].CourseID,
		r.rows[0].SchoolID,
		r.rows[0].TermCollectionID,
		r.rows[0].Enrollment,
		r.rows[0].MaxEnrollment,
		r.rows[0].InstructionMethod,
		r.rows[0].PrimaryFacultyID,
	}, nil
}

func (r iteratorForStageSections) Err() error {
	return nil
}

func (q *Queries) StageSections(ctx context.Context, arg []StageSectionsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"staging_sections"}, []string{"id", "campus", "course_id", "school_id", "term_collection_id", "enrollment", "max_enrollment", "instruction_method", "primary_faculty_id"}, &iteratorForStageSections{rows: arg})
}
