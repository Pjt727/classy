// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: entry.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteStagingMeetingTimes = `-- name: DeleteStagingMeetingTimes :exec
DELETE FROM staging_meeting_times
WHERE school_id = $1
     AND term_collection_id = $2
`

type DeleteStagingMeetingTimesParams struct {
	SchoolID         string
	TermCollectionID string
}

func (q *Queries) DeleteStagingMeetingTimes(ctx context.Context, arg DeleteStagingMeetingTimesParams) error {
	_, err := q.db.Exec(ctx, deleteStagingMeetingTimes, arg.SchoolID, arg.TermCollectionID)
	return err
}

const deleteStagingSections = `-- name: DeleteStagingSections :exec
DELETE FROM staging_sections
WHERE school_id = $1
    AND term_collection_id = $2
`

type DeleteStagingSectionsParams struct {
	SchoolID         string
	TermCollectionID string
}

func (q *Queries) DeleteStagingSections(ctx context.Context, arg DeleteStagingSectionsParams) error {
	_, err := q.db.Exec(ctx, deleteStagingSections, arg.SchoolID, arg.TermCollectionID)
	return err
}

const moveStagedMeetingTimes = `-- name: MoveStagedMeetingTimes :exec
INSERT INTO meeting_times
    (sequence, section_id,
        term_collection_id, course_id, school_id, 
        start_date, end_date, meeting_type,
        start_minutes, end_minutes, is_monday,
        is_tuesday, is_wednesday, is_thursday,
        is_friday, is_saturday, is_sunday)
SELECT 
    DISTINCT ON (sequence, section_id, term_collection_id, course_id, school_id)
    sequence, section_id, term_collection_id,
    course_id, school_id, 
    start_date, end_date, meeting_type,
    start_minutes, end_minutes, is_monday,
    is_tuesday, is_wednesday, is_thursday,
    is_friday, is_saturday, is_sunday
FROM staging_meeting_times
ON CONFLICT ("sequence", section_id, course_id, school_id, term_collection_id) DO UPDATE
SET 
    start_date = EXCLUDED.start_date,
    end_date = EXCLUDED.end_date,
    meeting_type = EXCLUDED.meeting_type,
    start_minutes = EXCLUDED.start_minutes,
    end_minutes = EXCLUDED.end_minutes,
    is_monday = EXCLUDED.is_monday,
    is_tuesday = EXCLUDED.is_tuesday,
    is_wednesday = EXCLUDED.is_wednesday,
    is_thursday = EXCLUDED.is_thursday,
    is_friday = EXCLUDED.is_friday,
    is_saturday = EXCLUDED.is_saturday,
    is_sunday = EXCLUDED.is_sunday
WHERE meeting_times.start_date != EXCLUDED.start_date
    OR meeting_times.end_date != EXCLUDED.end_date
    OR meeting_times.meeting_type != EXCLUDED.meeting_type
    OR meeting_times.start_minutes != EXCLUDED.start_minutes
    OR meeting_times.end_minutes != EXCLUDED.end_minutes
    OR meeting_times.is_monday != EXCLUDED.is_monday
    OR meeting_times.is_tuesday != EXCLUDED.is_tuesday
    OR meeting_times.is_wednesday != EXCLUDED.is_wednesday
    OR meeting_times.is_thursday != EXCLUDED.is_thursday
    OR meeting_times.is_friday != EXCLUDED.is_friday
    OR meeting_times.is_saturday != EXCLUDED.is_saturday
    OR meeting_times.is_sunday != EXCLUDED.is_sunday
`

func (q *Queries) MoveStagedMeetingTimes(ctx context.Context) error {
	_, err := q.db.Exec(ctx, moveStagedMeetingTimes)
	return err
}

const moveStagedSections = `-- name: MoveStagedSections :exec
INSERT INTO sections 
    (id, term_collection_id,
        course_id, school_id, max_enrollment, 
        instruction_method, campus, enrollment,
        primary_faculty_id)
SELECT
    DISTINCT ON (id, term_collection_id, course_id, school_id)
    id, term_collection_id,
    course_id, school_id, max_enrollment, 
    instruction_method, campus, enrollment,
    primary_faculty_id
FROM staging_sections
ON CONFLICT (id, course_id, school_id, term_collection_id) DO UPDATE
SET 
    campus = EXCLUDED.campus,
    enrollment = EXCLUDED.enrollment,
    max_enrollment = EXCLUDED.max_enrollment,
    instruction_method = EXCLUDED.instruction_method,
    primary_faculty_id = EXCLUDED.primary_faculty_id
WHERE sections.campus != EXCLUDED.campus
    OR sections.enrollment != EXCLUDED.enrollment
    OR sections.max_enrollment != EXCLUDED.max_enrollment
    OR sections.instruction_method != EXCLUDED.instruction_method
    OR sections.primary_faculty_id != EXCLUDED.primary_faculty_id
`

func (q *Queries) MoveStagedSections(ctx context.Context) error {
	_, err := q.db.Exec(ctx, moveStagedSections)
	return err
}

const removeUnstagedMeetings = `-- name: RemoveUnstagedMeetings :exec
DELETE FROM meeting_times mt
WHERE mt.term_collection_id = $1
  AND mt.school_id = $2
  AND NOT EXISTS (
    SELECT 1 
    FROM staging_meeting_times smt
    WHERE smt."sequence" = mt."sequence"
      AND smt.term_collection_id = mt.term_collection_id
      AND smt.course_id = mt.course_id
      AND smt.school_id = mt.school_id
      AND smt.section_id = mt.section_id
  )
`

type RemoveUnstagedMeetingsParams struct {
	TermCollectionID string
	SchoolID         string
}

func (q *Queries) RemoveUnstagedMeetings(ctx context.Context, arg RemoveUnstagedMeetingsParams) error {
	_, err := q.db.Exec(ctx, removeUnstagedMeetings, arg.TermCollectionID, arg.SchoolID)
	return err
}

const removeUnstagedSections = `-- name: RemoveUnstagedSections :exec
DELETE FROM sections s
WHERE s.term_collection_id = $1
  AND s.school_id = $2
  AND NOT EXISTS (
    SELECT 1 
    FROM staging_sections ss
    WHERE ss.id = s.id
      AND ss.term_collection_id = s.term_collection_id
      AND ss.course_id = s.course_id
      AND ss.school_id = s.school_id
  )
`

type RemoveUnstagedSectionsParams struct {
	TermCollectionID string
	SchoolID         string
}

func (q *Queries) RemoveUnstagedSections(ctx context.Context, arg RemoveUnstagedSectionsParams) error {
	_, err := q.db.Exec(ctx, removeUnstagedSections, arg.TermCollectionID, arg.SchoolID)
	return err
}

type StageMeetingTimesParams struct {
	Sequence         int32
	SectionID        string
	TermCollectionID string
	CourseID         string
	SchoolID         string
	StartDate        pgtype.Timestamp
	EndDate          pgtype.Timestamp
	MeetingType      pgtype.Text
	StartMinutes     pgtype.Time
	EndMinutes       pgtype.Time
	IsMonday         bool
	IsTuesday        bool
	IsWednesday      bool
	IsThursday       bool
	IsFriday         bool
	IsSaturday       bool
	IsSunday         bool
}

type StageSectionsParams struct {
	ID                string
	Campus            pgtype.Text
	CourseID          string
	SchoolID          string
	TermCollectionID  string
	Enrollment        pgtype.Int4
	MaxEnrollment     pgtype.Int4
	InstructionMethod pgtype.Text
	PrimaryFacultyID  pgtype.Text
}

const upsertSchool = `-- name: UpsertSchool :exec
INSERT INTO schools
    (id, name)
VALUES
    ($1, $2)
ON CONFLICT DO NOTHING
`

type UpsertSchoolParams struct {
	ID   string
	Name string
}

func (q *Queries) UpsertSchool(ctx context.Context, arg UpsertSchoolParams) error {
	_, err := q.db.Exec(ctx, upsertSchool, arg.ID, arg.Name)
	return err
}
