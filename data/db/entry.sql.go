// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: entry.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listCourses = `-- name: ListCourses :many
SELECT id, school_id, subject_code, number, subject_description, title, description, credit_hours FROM courses
`

func (q *Queries) ListCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.Query(ctx, listCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.SchoolID,
			&i.SubjectCode,
			&i.Number,
			&i.SubjectDescription,
			&i.Title,
			&i.Description,
			&i.CreditHours,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const moveStagedMeetingTimes = `-- name: MoveStagedMeetingTimes :exec
INSERT INTO meeting_times
    (sequence, section_id, term_season, 
        term_year, course_id, school_id, 
        start_date, end_date, meeting_type,
        start_minutes, end_minutes, is_monday,
        is_tuesday, is_wednesday, is_thursday,
        is_friday, is_saturday, is_sunday)
SELECT 
    sequence, section_id, term_season, 
    term_year, course_id, school_id, 
    start_date, end_date, meeting_type,
    start_minutes, end_minutes, is_monday,
    is_tuesday, is_wednesday, is_thursday,
    is_friday, is_saturday, is_sunday
FROM staging_meeting_times
ON CONFLICT ("sequence", section_id, course_id, school_id, term_year, term_season) DO UPDATE
SET 
    start_date = EXCLUDED.start_date,
    end_date = EXCLUDED.end_date,
    meeting_type = EXCLUDED.meeting_type,
    start_minutes = EXCLUDED.start_minutes,
    end_minutes = EXCLUDED.end_minutes,
    is_monday = EXCLUDED.is_monday,
    is_tuesday = EXCLUDED.is_tuesday,
    is_wednesday = EXCLUDED.is_wednesday,
    is_thursday = EXCLUDED.is_thursday,
    is_friday = EXCLUDED.is_friday,
    is_saturday = EXCLUDED.is_saturday,
    is_sunday = EXCLUDED.is_sunday
WHERE meeting_times.start_date != EXCLUDED.start_date
    OR meeting_times.end_date != EXCLUDED.end_date
    OR meeting_times.meeting_type != EXCLUDED.meeting_type
    OR meeting_times.start_minutes != EXCLUDED.start_minutes
    OR meeting_times.end_minutes != EXCLUDED.end_minutes
    OR meeting_times.is_monday != EXCLUDED.is_monday
    OR meeting_times.is_tuesday != EXCLUDED.is_tuesday
    OR meeting_times.is_wednesday != EXCLUDED.is_wednesday
    OR meeting_times.is_thursday != EXCLUDED.is_thursday
    OR meeting_times.is_friday != EXCLUDED.is_friday
    OR meeting_times.is_saturday != EXCLUDED.is_saturday
    OR meeting_times.is_sunday != EXCLUDED.is_sunday
`

func (q *Queries) MoveStagedMeetingTimes(ctx context.Context) error {
	_, err := q.db.Exec(ctx, moveStagedMeetingTimes)
	return err
}

const moveStagedSections = `-- name: MoveStagedSections :exec
INSERT INTO sections 
    (id, term_season, term_year, 
        course_id, school_id, max_enrollment, 
        instruction_method, campus, enrollment,
        primary_faculty_id)
SELECT
    id, term_season, term_year, 
    course_id, school_id, max_enrollment, 
    instruction_method, campus, enrollment,
    primary_faculty_id
FROM staging_sections
ON CONFLICT (id, course_id, school_id, term_year, term_season) DO UPDATE
SET 
    campus = EXCLUDED.campus,
    enrollment = EXCLUDED.enrollment,
    max_enrollment = EXCLUDED.max_enrollment,
    instruction_method = EXCLUDED.instruction_method,
    primary_faculty_id = EXCLUDED.primary_faculty_id
WHERE sections.campus != EXCLUDED.campus
    OR sections.enrollment != EXCLUDED.enrollment
    OR sections.max_enrollment != EXCLUDED.max_enrollment
    OR sections.instruction_method != EXCLUDED.instruction_method
    OR sections.primary_faculty_id != EXCLUDED.primary_faculty_id
`

func (q *Queries) MoveStagedSections(ctx context.Context) error {
	_, err := q.db.Exec(ctx, moveStagedSections)
	return err
}

const removeUnstagedMeetings = `-- name: RemoveUnstagedMeetings :exec
DELETE FROM meeting_times mt
WHERE mt.term_season = $1 
  AND mt.term_year = $2 
  AND mt.school_id = $3
  AND NOT EXISTS (
    SELECT 1 
    FROM staging_meeting_times smt
    WHERE smt."sequence" = mt."sequence"
      AND smt.term_season = mt.term_season
      AND smt.term_year = mt.term_year
      AND smt.course_id = mt.course_id
      AND smt.school_id = mt.school_id
      AND smt.section_id = mt.section_id
  )
`

type RemoveUnstagedMeetingsParams struct {
	Termseason SeasonEnum
	Termyear   int32
	SchoolID   string
}

func (q *Queries) RemoveUnstagedMeetings(ctx context.Context, arg RemoveUnstagedMeetingsParams) error {
	_, err := q.db.Exec(ctx, removeUnstagedMeetings, arg.Termseason, arg.Termyear, arg.SchoolID)
	return err
}

const removeUnstagedSections = `-- name: RemoveUnstagedSections :exec
DELETE FROM sections s
WHERE s.term_season = $1 
  AND s.term_year = $2 
  AND s.school_id = $3
  AND NOT EXISTS (
    SELECT 1 
    FROM staging_sections ss
    WHERE ss.id = s.id
      AND ss.term_season = s.term_season
      AND ss.term_year = s.term_year
      AND ss.course_id = s.course_id
      AND ss.school_id = s.school_id
  )
`

type RemoveUnstagedSectionsParams struct {
	Termseason SeasonEnum
	Termyear   int32
	SchoolID   string
}

func (q *Queries) RemoveUnstagedSections(ctx context.Context, arg RemoveUnstagedSectionsParams) error {
	_, err := q.db.Exec(ctx, removeUnstagedSections, arg.Termseason, arg.Termyear, arg.SchoolID)
	return err
}

type StageMeetingTimesParams struct {
	Sequence     int32
	Sectionid    string
	Termseason   SeasonEnum
	Termyear     int32
	Courseid     string
	Schoolid     string
	Startdate    pgtype.Timestamp
	Enddate      pgtype.Timestamp
	Meetingtype  pgtype.Text
	Startminutes pgtype.Time
	Endminutes   pgtype.Time
	Ismonday     bool
	Istuesday    bool
	Iswednesday  bool
	Isthursday   bool
	Isfriday     bool
	Issaturday   bool
	Issunday     bool
}

type StageSectionsParams struct {
	ID                string
	Campus            pgtype.Text
	CourseID          string
	Schoolid          string
	Termyear          int32
	Termseason        SeasonEnum
	Enrollment        pgtype.Int4
	Maxenrollment     pgtype.Int4
	Instructionmethod pgtype.Text
	Primaryfacultyid  pgtype.Text
}

const truncateStagingMeetingTimes = `-- name: TruncateStagingMeetingTimes :exec
TRUNCATE TABLE staging_meeting_times
`

func (q *Queries) TruncateStagingMeetingTimes(ctx context.Context) error {
	_, err := q.db.Exec(ctx, truncateStagingMeetingTimes)
	return err
}

const truncateStagingSections = `-- name: TruncateStagingSections :exec
TRUNCATE TABLE staging_sections
`

func (q *Queries) TruncateStagingSections(ctx context.Context) error {
	_, err := q.db.Exec(ctx, truncateStagingSections)
	return err
}

const upsertSchools = `-- name: UpsertSchools :exec
INSERT INTO schools
    (id, name)
VALUES
    ($1, $2)
ON CONFLICT DO NOTHING
`

type UpsertSchoolsParams struct {
	ID   string
	Name string
}

func (q *Queries) UpsertSchools(ctx context.Context, arg UpsertSchoolsParams) error {
	_, err := q.db.Exec(ctx, upsertSchools, arg.ID, arg.Name)
	return err
}
