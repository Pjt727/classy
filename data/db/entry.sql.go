// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: entry.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listCourses = `-- name: ListCourses :many
SELECT id, school_id, subject_code, number, subject_description, title, description, credit_hours FROM courses
`

func (q *Queries) ListCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.Query(ctx, listCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.SchoolID,
			&i.SubjectCode,
			&i.Number,
			&i.SubjectDescription,
			&i.Title,
			&i.Description,
			&i.CreditHours,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type StageMeetingTimesParams struct {
	Sectionid    string
	Termseason   SeasonEnum
	Termyear     int32
	Courseid     string
	Schoolid     string
	Startdate    pgtype.Timestamp
	Enddate      pgtype.Timestamp
	Meetingtype  pgtype.Text
	Startminutes pgtype.Time
	Endminutes   pgtype.Time
	Ismonday     bool
	Istuesday    bool
	Iswednesday  bool
	Isthursday   bool
	Isfriday     bool
	Issaturday   bool
	Issunday     bool
}

type StageSectionsParams struct {
	ID                string
	Campus            pgtype.Text
	CourseID          string
	Schoolid          string
	Termyear          int32
	Termseason        SeasonEnum
	Enrollment        pgtype.Int4
	Maxenrollment     pgtype.Int4
	Instructionmethod pgtype.Text
	Primaryfacultyid  pgtype.Text
}

const truncateStagingMeetingTimes = `-- name: TruncateStagingMeetingTimes :exec
TRUNCATE TABLE staging_meeting_times
`

func (q *Queries) TruncateStagingMeetingTimes(ctx context.Context) error {
	_, err := q.db.Exec(ctx, truncateStagingMeetingTimes)
	return err
}

const truncateStagingSections = `-- name: TruncateStagingSections :exec
TRUNCATE TABLE staging_sections
`

func (q *Queries) TruncateStagingSections(ctx context.Context) error {
	_, err := q.db.Exec(ctx, truncateStagingSections)
	return err
}

const upsertSchools = `-- name: UpsertSchools :exec
INSERT INTO schools
    (id, name)
VALUES
    ($1, $2)
ON CONFLICT DO NOTHING
`

type UpsertSchoolsParams struct {
	ID   string
	Name string
}

func (q *Queries) UpsertSchools(ctx context.Context, arg UpsertSchoolsParams) error {
	_, err := q.db.Exec(ctx, upsertSchools, arg.ID, arg.Name)
	return err
}
