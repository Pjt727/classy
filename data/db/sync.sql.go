// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sync.sql

package db

import (
	"context"
)

const getLastCommonSequences = `-- name: GetLastCommonSequences :many
SELECT school_id, MAX(sequence)::int as last_sequence
FROM historic_class_information
WHERE pk_fields->'term_collection_id' IS NULL
      AND school_id IN ($1::string[])
GROUP BY school_id
`

type GetLastCommonSequencesRow struct {
	SchoolID     string `json:"school_id"`
	LastSequence int32  `json:"last_sequence"`
}

func (q *Queries) GetLastCommonSequences(ctx context.Context, schoolIds []string) ([]GetLastCommonSequencesRow, error) {
	rows, err := q.db.Query(ctx, getLastCommonSequences, schoolIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLastCommonSequencesRow
	for rows.Next() {
		var i GetLastCommonSequencesRow
		if err := rows.Scan(&i.SchoolID, &i.LastSequence); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastSequence = `-- name: GetLastSequence :one
SELECT MAX(sequence)::int FROM historic_class_information
`

func (q *Queries) GetLastSequence(ctx context.Context) (int32, error) {
	row := q.db.QueryRow(ctx, getLastSequence)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const getLastSyncTimesForTerms = `-- name: GetLastSyncTimesForTerms :many
SELECT school_id, (pk_fields->'term_collection_id')::text as term_collection_id, sequence as last_sequence
FROM historic_class_information
WHERE sequence IN (
    SELECT MAX(h.sequence)
    FROM historic_class_information h
    WHERE EXISTS (
        SELECT 1
        FROM 
            UNNEST($1::string[]) WITH ORDINALITY AS sch_id,
            UNNEST($2::string[]) WITH ORDINALITY AS term_collection_id
        WHERE h.school_id = sch_id
              AND h.pk_fields->'term_collection_id' = term_collection_id 
    )
    GROUP BY h.school_id, h.table_name, h.composite_hash
)
`

type GetLastSyncTimesForTermsParams struct {
	SchoolIds         []string `json:"school_ids"`
	TermCollectionIds []string `json:"term_collection_ids"`
}

type GetLastSyncTimesForTermsRow struct {
	SchoolID         string `json:"school_id"`
	TermCollectionID string `json:"term_collection_id"`
	LastSequence     int32  `json:"last_sequence"`
}

func (q *Queries) GetLastSyncTimesForTerms(ctx context.Context, arg GetLastSyncTimesForTermsParams) ([]GetLastSyncTimesForTermsRow, error) {
	rows, err := q.db.Query(ctx, getLastSyncTimesForTerms, arg.SchoolIds, arg.TermCollectionIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLastSyncTimesForTermsRow
	for rows.Next() {
		var i GetLastSyncTimesForTermsRow
		if err := rows.Scan(&i.SchoolID, &i.TermCollectionID, &i.LastSequence); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastestSyncChanges = `-- name: GetLastestSyncChanges :many
SELECT table_name, updated_pk_fields AS pk_fields, sync_action, relevant_fields
FROM sync_diffs WHERE (school_id, table_name, composite_hash, updated_input_at) IN (
    SELECT s.school_id, s.table_name, s.composite_hash, MIN(s.updated_input_at)
    FROM sync_diffs s
    WHERE s.sequence > $1
    GROUP BY s.school_id, s.table_name, s.composite_hash
)
`

type GetLastestSyncChangesRow struct {
	TableName      string                 `json:"table_name"`
	PkFields       map[string]interface{} `json:"pk_fields"`
	SyncAction     string                 `json:"sync_action"`
	RelevantFields map[string]interface{} `json:"relevant_fields"`
}

func (q *Queries) GetLastestSyncChanges(ctx context.Context, lastSequence int32) ([]GetLastestSyncChangesRow, error) {
	rows, err := q.db.Query(ctx, getLastestSyncChanges, lastSequence)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLastestSyncChangesRow
	for rows.Next() {
		var i GetLastestSyncChangesRow
		if err := rows.Scan(
			&i.TableName,
			&i.PkFields,
			&i.SyncAction,
			&i.RelevantFields,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastestSyncChangesForTerms = `-- name: GetLastestSyncChangesForTerms :many
SELECT table_name, updated_pk_fields AS pk_fields, sync_action, relevant_fields
FROM sync_diffs
WHERE sequence IN (
    SELECT MIN(h.sequence)
    FROM historic_class_information h
    WHERE EXISTS (
        SELECT 1
        FROM 
            UNNEST($1::string[]) WITH ORDINALITY AS sch_id,
            UNNEST($2::string[]) WITH ORDINALITY AS term_collection_id,
            UNNEST($3::int[]) WITH ORDINALITY AS seq
        WHERE h.school_id = sch_id
              AND h.pk_fields->'term_collection_id' = term_collection_id 
              AND h.sequence > seq
    )
    GROUP BY h.school_id, h.table_name, h.composite_hash
) OR sequence IN (
    SELECT MIN(h.sequence)
    FROM historic_class_information h
    WHERE h.pk_fields->'term_collection_id' IS NULL AND EXISTS (
        SELECT 1
        FROM
            UNNEST($4::string[]) WITH ORDINALITY AS sch_id,
            UNNEST($5::int[]) WITH ORDINALITY AS seq
        WHERE h.school_id = sch_id 
            AND h.sequence > seq
    )
    GROUP BY h.school_id, h.table_name, h.composite_hash
)
`

type GetLastestSyncChangesForTermsParams struct {
	TSchoolIds         []string `json:"t_school_ids"`
	TTermCollectionIds []string `json:"t_term_collection_ids"`
	TLastSequences     []int32  `json:"t_last_sequences"`
	SSchoolIds         []string `json:"s_school_ids"`
	SLastSequences     []int32  `json:"s_last_sequences"`
}

type GetLastestSyncChangesForTermsRow struct {
	TableName      string                 `json:"table_name"`
	PkFields       map[string]interface{} `json:"pk_fields"`
	SyncAction     string                 `json:"sync_action"`
	RelevantFields map[string]interface{} `json:"relevant_fields"`
}

// The strategy of this query is get the next sync diff which is after
//
//	the last sync
func (q *Queries) GetLastestSyncChangesForTerms(ctx context.Context, arg GetLastestSyncChangesForTermsParams) ([]GetLastestSyncChangesForTermsRow, error) {
	rows, err := q.db.Query(ctx, getLastestSyncChangesForTerms,
		arg.TSchoolIds,
		arg.TTermCollectionIds,
		arg.TLastSequences,
		arg.SSchoolIds,
		arg.SLastSequences,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLastestSyncChangesForTermsRow
	for rows.Next() {
		var i GetLastestSyncChangesForTermsRow
		if err := rows.Scan(
			&i.TableName,
			&i.PkFields,
			&i.SyncAction,
			&i.RelevantFields,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
