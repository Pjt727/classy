// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sync.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getLastestSyncChanges = `-- name: GetLastestSyncChanges :many
SELECT table_name, updated_pk_fields AS pk_fields, sync_action, relevant_fields 
FROM sync_diffs WHERE (school_id, table_name, composite_hash, updated_input_at) IN (
    SELECT s.school_id, s.table_name, s.composite_hash, MIN(s.updated_input_at)
    FROM sync_diffs s
    WHERE s.updated_input_at > $1
    GROUP BY s.school_id, s.table_name, s.composite_hash
)
`

type GetLastestSyncChangesRow struct {
	TableName      string                 `json:"table_name"`
	PkFields       map[string]interface{} `json:"pk_fields"`
	SyncAction     string                 `json:"sync_action"`
	RelevantFields map[string]interface{} `json:"relevant_fields"`
}

func (q *Queries) GetLastestSyncChanges(ctx context.Context, lastSyncTime pgtype.Timestamptz) ([]GetLastestSyncChangesRow, error) {
	rows, err := q.db.Query(ctx, getLastestSyncChanges, lastSyncTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLastestSyncChangesRow
	for rows.Next() {
		var i GetLastestSyncChangesRow
		if err := rows.Scan(
			&i.TableName,
			&i.PkFields,
			&i.SyncAction,
			&i.RelevantFields,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
