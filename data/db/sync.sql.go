// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sync.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getLastestSyncChanges = `-- name: GetLastestSyncChanges :many
SELECT table_name, composite_hash, MIN(pk_fields), 
       combined_json(
            (sync_action, relevant_fields)::sync_change
            ORDER BY input_at
        )
FROM historic_class_information 
WHERE input_at > $1
GROUP BY table_name, composite_hash, pk_fields
`

type GetLastestSyncChangesRow struct {
	TableName     string      `json:"table_name"`
	CompositeHash string      `json:"composite_hash"`
	Min           interface{} `json:"min"`
	CombinedJson  interface{} `json:"combined_json"`
}

// min is used incase for some reason the json fields arrange themselves differently
func (q *Queries) GetLastestSyncChanges(ctx context.Context, lastSyncTime pgtype.Timestamptz) ([]GetLastestSyncChangesRow, error) {
	rows, err := q.db.Query(ctx, getLastestSyncChanges, lastSyncTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLastestSyncChangesRow
	for rows.Next() {
		var i GetLastestSyncChangesRow
		if err := rows.Scan(
			&i.TableName,
			&i.CompositeHash,
			&i.Min,
			&i.CombinedJson,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
