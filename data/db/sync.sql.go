// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sync.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getLastestSyncChanges = `-- name: GetLastestSyncChanges :many
SELECT table_name,
       jsonb_set(pk_fields::jsonb, '{school_id}', to_jsonb(school_id), true) AS updated_pk_fields, 
       (combined_json(
               (sync_action, relevant_fields)::sync_change
               ORDER BY input_at
       )) AS sync_changes
FROM 
    historic_class_information 
WHERE input_at > $1
GROUP BY 
    table_name,
    composite_hash, 
    updated_pk_fields
`

type GetLastestSyncChangesRow struct {
	TableName       string      `json:"table_name"`
	UpdatedPkFields []byte      `json:"updated_pk_fields"`
	SyncChanges     interface{} `json:"sync_changes"`
}

func (q *Queries) GetLastestSyncChanges(ctx context.Context, lastSyncTime pgtype.Timestamptz) ([]GetLastestSyncChangesRow, error) {
	rows, err := q.db.Query(ctx, getLastestSyncChanges, lastSyncTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLastestSyncChangesRow
	for rows.Next() {
		var i GetLastestSyncChangesRow
		if err := rows.Scan(&i.TableName, &i.UpdatedPkFields, &i.SyncChanges); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
