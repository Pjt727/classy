// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package db

import (
	"context"
)

const authGetUser = `-- name: AuthGetUser :one
SELECT username, encrypted_password FROM management_users
WHERE username = $1
`

func (q *Queries) AuthGetUser(ctx context.Context, username string) (ManagementUser, error) {
	row := q.db.QueryRow(ctx, authGetUser, username)
	var i ManagementUser
	err := row.Scan(&i.Username, &i.EncryptedPassword)
	return i, err
}

const authInsertUser = `-- name: AuthInsertUser :exec
INSERT INTO management_users (username, encrypted_password)
VALUES ($1, $2)
`

type AuthInsertUserParams struct {
	Username          string `json:"username"`
	EncryptedPassword string `json:"encrypted_password"`
}

func (q *Queries) AuthInsertUser(ctx context.Context, arg AuthInsertUserParams) error {
	_, err := q.db.Exec(ctx, authInsertUser, arg.Username, arg.EncryptedPassword)
	return err
}
