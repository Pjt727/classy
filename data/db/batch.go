// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const upsertTerm = `-- name: UpsertTerm :batchexec
INSERT INTO terms
    (year, season)
VALUES
    ($1, $2)
ON CONFLICT DO NOTHING
`

type UpsertTermBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpsertTermParams struct {
	Year   int32      `json:"year"`
	Season SeasonEnum `json:"season"`
}

func (q *Queries) UpsertTerm(ctx context.Context, arg []UpsertTermParams) *UpsertTermBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Year,
			a.Season,
		}
		batch.Queue(upsertTerm, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpsertTermBatchResults{br, len(arg), false}
}

func (b *UpsertTermBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpsertTermBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const upsertTermCollection = `-- name: UpsertTermCollection :batchexec
INSERT INTO term_collections
    (id, school_id, year, season, name, still_collecting)
VALUES
    ($1, $2, $3, $4, $5, $6)
ON CONFLICT (id, school_id) DO UPDATE
SET
    still_collecting = EXCLUDED.still_collecting,
    name = EXCLUDED.name
WHERE term_collections.still_collecting != EXCLUDED.still_collecting
      OR term_collections.name != EXCLUDED.name
`

type UpsertTermCollectionBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpsertTermCollectionParams struct {
	ID              string      `json:"id"`
	SchoolID        string      `json:"school_id"`
	Year            int32       `json:"year"`
	Season          SeasonEnum  `json:"season"`
	Name            pgtype.Text `json:"name"`
	StillCollecting bool        `json:"still_collecting"`
}

func (q *Queries) UpsertTermCollection(ctx context.Context, arg []UpsertTermCollectionParams) *UpsertTermCollectionBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ID,
			a.SchoolID,
			a.Year,
			a.Season,
			a.Name,
			a.StillCollecting,
		}
		batch.Queue(upsertTermCollection, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpsertTermCollectionBatchResults{br, len(arg), false}
}

func (b *UpsertTermCollectionBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpsertTermCollectionBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
