// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const upsertCourses = `-- name: UpsertCourses :batchexec
INSERT INTO courses
    (id, school_id, subject_code,
        number, subject_description, title,
        description, credit_hours)
VALUES 
    ($1, $2, $3,
        $4, $5, $6,
        $7, $8)
ON CONFLICT DO NOTHING
`

type UpsertCoursesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpsertCoursesParams struct {
	ID                 string
	Schoolid           string
	Subjectcode        pgtype.Text
	Number             pgtype.Text
	Subjectdescription pgtype.Text
	Title              pgtype.Text
	Description        pgtype.Text
	Credithours        int32
}

func (q *Queries) UpsertCourses(ctx context.Context, arg []UpsertCoursesParams) *UpsertCoursesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ID,
			a.Schoolid,
			a.Subjectcode,
			a.Number,
			a.Subjectdescription,
			a.Title,
			a.Description,
			a.Credithours,
		}
		batch.Queue(upsertCourses, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpsertCoursesBatchResults{br, len(arg), false}
}

func (b *UpsertCoursesBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpsertCoursesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const upsertFaculty = `-- name: UpsertFaculty :batchexec
INSERT INTO faculty_members
    (id, school_id, name,
        email_address, first_name, last_name)
VALUES
    ($1, $2, $3,
        $4, $5, $6)
ON CONFLICT DO NOTHING
`

type UpsertFacultyBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpsertFacultyParams struct {
	ID           string
	Schoolid     string
	Name         string
	Emailaddress pgtype.Text
	Firstname    pgtype.Text
	Lastname     pgtype.Text
}

func (q *Queries) UpsertFaculty(ctx context.Context, arg []UpsertFacultyParams) *UpsertFacultyBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ID,
			a.Schoolid,
			a.Name,
			a.Emailaddress,
			a.Firstname,
			a.Lastname,
		}
		batch.Queue(upsertFaculty, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpsertFacultyBatchResults{br, len(arg), false}
}

func (b *UpsertFacultyBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpsertFacultyBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const upsertTerm = `-- name: UpsertTerm :batchexec
INSERT INTO terms
    (year, season)
VALUES
    ($1, $2)
ON CONFLICT DO NOTHING
`

type UpsertTermBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpsertTermParams struct {
	Year   int32
	Season SeasonEnum
}

func (q *Queries) UpsertTerm(ctx context.Context, arg []UpsertTermParams) *UpsertTermBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Year,
			a.Season,
		}
		batch.Queue(upsertTerm, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpsertTermBatchResults{br, len(arg), false}
}

func (b *UpsertTermBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpsertTermBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const upsertTermCollection = `-- name: UpsertTermCollection :batchexec
INSERT INTO term_collections
    (school_id, year, season, still_collecting)
VALUES
    ($1, $2, $3, $4)
ON CONFLICT (school_id, year, season) DO UPDATE
SET
    still_collecting = EXCLUDED.still_collecting
`

type UpsertTermCollectionBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpsertTermCollectionParams struct {
	Schoolid        string
	Year            int32
	Season          SeasonEnum
	Stillcollecting bool
}

func (q *Queries) UpsertTermCollection(ctx context.Context, arg []UpsertTermCollectionParams) *UpsertTermCollectionBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Schoolid,
			a.Year,
			a.Season,
			a.Stillcollecting,
		}
		batch.Queue(upsertTermCollection, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpsertTermCollectionBatchResults{br, len(arg), false}
}

func (b *UpsertTermCollectionBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpsertTermCollectionBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
